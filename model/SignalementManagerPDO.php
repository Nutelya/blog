<?php
/**
 *
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 */

class SignalementManagerPDO {

	/**
	 *
	 * @var PDO
	 * @access protected
	 */
	protected  $db;


	/**
	 * @access public
	 * @param PDO $db
	 * @return void
	 */

	public final function __construct(PDO $db)
	  {
	    $this->db = $db;
	  }


	/**
	 * @access public
	 * @param Signalement $signalement
	 * @return void
	 */

	public final  function add(Signalement $signalement) {
		$request = $this->db->prepare('INSERT INTO signalement(idBillet, idAuteur, idCommentaire, dateAjout, estNouveau) VALUES(:idBillet, :idAuteur, :idCommentaire, NOW(), :estNouveau)');
		$request->bindValue(':idBillet', $signalement->idBillet());
		$request->bindValue(':idAuteur', $signalement->idAuteur());
    $request->bindValue(':idCommentaire', $signalement->idCommentaire());
    $request->bindValue(':estNouveau', 1);
		$request->execute();
	}


	/**
	 * @access public
	 * @param Signalement $signalement
	 * @return void
	 */

	public final  function update(Signalement $signalement) {
		$request = $this->db->prepare('UPDATE signalement SET estNouveau = :estNouveau WHERE id = :id');
		$request->bindValue(':estNouveau', 1, PDO::PARAM_BOOL);
		$request->execute();
	}


	/**
	 * @access public
	 * @param int $id
	 * @return void
	 */

	public final  function delete($id) {
		$this->db->exec('DELETE FROM signalement WHERE id = '.(int) $id);
	}

	/**
	 * @access public
	 * @return int
	 */

	public final  function count() {
		return $this->db->query('SELECT COUNT(*) FROM signalement')->fetchColumn();
	}


	/**
	 * @access public
	 * @param int $start
	 * @param int $end
	 * @return array
	 */

	public final  function getList($start = -1, $end = -1) {
		$sql = 'SELECT id, idBillet, idAuteur, idCommentaire, dateAjout, estNouveau FROM signalement ORDER BY idCommentaire, dateAjout DESC';

    // On vérifie l'intégrité des paramètres fournis.
    if ($start != -1 || $end != -1)
    {
      $sql .= ' LIMIT '.(int) $end.' OFFSET '.(int) $start;
    }
    $request = $this->db->query($sql);
    $request->setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, 'Signalement');

    $listeSignalement = $request->fetchAll();

    // On parcourt notre liste de news pour pouvoir placer des instances de DateTime en guise de dates d'ajout et de modification.
    foreach ($listeSignalement as $signalement)
    {
      $signalement->setDateAjout(new DateTime($signalement->dateAjout()));
    }

    $request->closeCursor();

    return $listeSignalement;
	}


	/**
	 * @access public
	 * @param int $id
	 * @return Signalement
	 */

	public final  function getUnique($id) {
	 $request = $this->db->prepare('SELECT id, idBillet, idAuteur, idCommentaire, dateAjout, estNouveau FROM signalement WHERE id = :id');
	 $request->bindValue(':id', (int) $id, PDO::PARAM_INT);
	 $request->execute();
	 $request->setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, 'Signalement');

	 $signalement = $request->fetch();

	 $signalement->setDateAjout(new DateTime($signalement->dateAjout()));

	 return $signalement;
	}


}
?>

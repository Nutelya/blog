<?php
/**
 *
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 */

class CommentaireManagerPDO {

	/**
	 *
	 * @var PDO
	 * @access protected
	 */
	protected  $db;


	/**
	 * @access public
	 * @param PDO $db
	 * @return void
	 */

	public final function __construct(PDO $db)
	  {
	    $this->db = $db;
	  }


	/**
	 * @access public
	 * @param Commentaire $commentaire
	 * @return void
	 */

	public final  function add(Commentaire $commentaire) {
		$request = $this->db->prepare('INSERT INTO commentaire(idBillet, idAuteur, contenu, dateAjout, dateEdit) VALUES(:idBillet, :idAuteur, :contenu, NOW(), NOW())');
		$request->bindValue(':idBillet', $commentaire->idBillet());
		$request->bindValue(':idAuteur', $commentaire->idAuteur());
    $request->bindValue(':contenu', $commentaire->contenu());
		$request->execute();
	}


	/**
	 * @access public
	 * @param Commentaire $commentaire
	 * @return void
	 */

	public final  function update(Commentaire $commentaire) {
		$request = $this->db->prepare('UPDATE commentaire SET title = :title, container = :container, dateEdit = NOW() WHERE id = :id');
		$request->bindValue(':id', $commentaire->id(), PDO::PARAM_INT);
		$request->bindValue(':title', $commentaire->title());
		$request->bindValue(':container', $commentaire->container());
		$request->execute();
	}


	/**
	 * @access public
	 * @param int $id
	 * @return void
	 */

	public final  function delete($id) {
		$this->db->exec('DELETE FROM commentaire WHERE id = '.(int) $id);
	}


	/**
	 * @access public
	 * @return int
	 */

	public final  function count() {
		return $this->db->query('SELECT COUNT(*) FROM commentaire')->fetchColumn();
	}


	/**
	 * @access public
	 * @param int $start
	 * @param int $end
	 * @return array
	 */

	public final  function getList($start = -1, $end = -1) {
		$sql = 'SELECT id, idBillet, idAuteur, contenu, dateAjout, dateEdit FROM commentaire ORDER BY id';

    // On vérifie l'intégrité des paramètres fournis.
    if ($start != -1 || $end != -1)
    {
      $sql .= ' LIMIT '.(int) $end.' OFFSET '.(int) $start;
    }
    $request = $this->db->query($sql);
    $request->setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, 'Commentaire');

    $listeCommentaire = $request->fetchAll();

    // On parcourt notre liste de news pour pouvoir placer des instances de DateTime en guise de dates d'ajout et de modification.
    foreach ($listeCommentaire as $commentaire)
    {
      $commentaire->setDateAjout(new DateTime($commentaire->dateAjout()));
      $commentaire->setDateEdit(new DateTime($commentaire->dateEdit()));
    }

    $request->closeCursor();

    return $listeCommentaire;
	}

  /**
	 * @access public
	 * @param int $start
	 * @param int $end
   * @param int $idBillet
	 * @return array
	 */

	public final  function getListCom($start = -1, $end = -1, $idBillet) {
		$sql = 'SELECT id, idBillet, idAuteur, contenu, dateAjout, dateEdit FROM commentaire WHERE idBillet = :idBillet ORDER BY id';

    // On vérifie l'intégrité des paramètres fournis.
    if ($start != -1 || $end != -1)
    {
      $sql .= ' LIMIT '.(int) $end.' OFFSET '.(int) $start;
    }
    $request = $this->db->prepare($sql);
    $request->bindValue(':idBillet', $idBillet, PDO::PARAM_INT);
    $request->execute();
    $request->setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, 'Commentaire');

    $listeCommentaire = $request->fetchAll();

    // On parcourt notre liste de news pour pouvoir placer des instances de DateTime en guise de dates d'ajout et de modification.
    foreach ($listeCommentaire as $commentaire)
    {
      $commentaire->setDateAjout(new DateTime($commentaire->dateAjout()));
      $commentaire->setDateEdit(new DateTime($commentaire->dateEdit()));
    }

    $request->closeCursor();

    return $listeCommentaire;
	}


	/**
	 * @access public
	 * @param int $id
	 * @return Commentaire
	 */

	public final  function getUnique($id) {
	 $request = $this->db->prepare('SELECT id, title, container, dateAdd, dateEdit FROM commentaire WHERE id = :id');
	 $request->bindValue(':id', (int) $id, PDO::PARAM_INT);
	 $request->execute();
	 $request->setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, 'Commentaire');

	 $commentaire = $request->fetch();

	 $commentaire->setDateAdd(new DateTime($commentaire->dateAdd()));
	 $commentaire->setDateEdit(new DateTime($commentaire->dateEdit()));

	 return $commentaire;
	}


}
?>

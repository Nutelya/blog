<?php
/**
 *
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 */

class UserManagerPDO {

	/**
	 *
	 * @var PDO
	 * @access protected
	 */
	protected  $db;

	/**
	 * @access public
	 * @param PDO $db
	 * @return void
	 */

	public final function __construct(PDO $db)
		{
			$this->db = $db;
		}

	/**
	 * @access public
	 * @param User $user
	 * @return void
	 */

	public final  function add(User $user) {
		$password_hache = password_hash($user->password(), PASSWORD_DEFAULT);
		$request = $this->db->prepare('INSERT INTO utilisateur(pseudo, password, email, date_register, role) VALUES(:pseudo, :password, :email, NOW(), :role)');
		$request->bindValue(':pseudo', $user->pseudo());
		$request->bindValue(':password', $password_hache);
		$request->bindValue(':email', $user->email());
		$request->bindValue(':role', 'membre');
		$request->execute();
	}


	/**
	 * @access protected
	 * @param string $password
	 * @return void
	 */

	protected final  function updatePassword($password) {

	}


	/**
	 * @access protected
	 * @param string $email
	 * @return void
	 */

	protected final  function updateEmail($email) {

	}


	/**
	 * @access public
	 * @param int $id
	 * @return void
	 */

	public final  function delete($id) {

	}


	/**
	 * @access public
	 * @return int
	 */

	public final  function count() {

	}


	/**
	 * @access public
	 * @param int $start
	 * @param int $end
	 * @return array
	 */

	public final  function getList($start = -1, $end = -1) {
		$sql = 'SELECT id, pseudo, password, email, date_register FROM utilisateur ORDER BY id DESC';

    // On vérifie l'intégrité des paramètres fournis.
    if ($start != -1 || $end != -1)
    {
      $sql .= ' LIMIT '.(int) $end.' OFFSET '.(int) $start;
    }

    $request = $this->db->query($sql);
    $request->setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, 'User');

    $listeUtilisateur = $request->fetchAll();

    // On parcourt notre liste de news pour pouvoir placer des instances de DateTime en guise de dates d'ajout et de modification.
    foreach ($listeUtilisateur as $user)
    {
      $user->setDate_register(new DateTime($user->date_register()));
    }

    $request->closeCursor();

    return $listeUtilisateur;
	}


	/**
	 * @access public
	 * @param int $id
	 * @return User
	 */

	public final  function getUnique($id) {
	 $request = $this->db->prepare('SELECT id, pseudo, password, email, date_register, role FROM utilisateur WHERE id = :id');
 	 $request->bindValue(':id', (int) $id, PDO::PARAM_INT);
 	 $request->execute();
 	 $request->setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, 'User');

 	 $user = $request->fetch();

 	 $user->setDate_register(new DateTime($user->date_register()));

 	 return $user;
	}


	/**
	 * @access public
	 * @param int $id
	 * @return void
	 */

	public final  function updateRank($id) {

	}

	public final function connexion($pseudo, $password) {
		//  Récupération de l'utilisateur et de son pass hashé
$req = $this->db->prepare('SELECT id, password FROM utilisateur WHERE pseudo = :pseudo');
$req->execute(array(
    ':pseudo' => $pseudo));
$resultat = $req->fetch();

// Comparaison du pass envoyé via le formulaire avec la base
$isPasswordCorrect = password_verify($password, $resultat['password']);

if (!$resultat)
{
    echo 'Mauvais identifiant ou mot de passe !';
}
else
{
    if ($isPasswordCorrect) {
        session_start();
        $_SESSION['id'] = $resultat['id'];
        $_SESSION['pseudo'] = $pseudo;
        echo 'Vous êtes connecté !';
    }
    else {
        echo 'Mauvais identifiant ou mot de passe !';
    }
}
	}
}
?>

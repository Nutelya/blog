<?php
/**
 *
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 */
namespace blog\model;
use \PDO;
use \DateTime;
class UserManagerPDO {

	/**
	 *
	 * @var PDO
	 * @access protected
	 */
	protected  $db;

	/**
	 * @access public
	 * @param PDO $db
	 * @return void
	 */

	public final function __construct(PDO $db)
		{
			$this->db = $db;
		}

	/**
	 * @access public
	 * @param User $user
	 * @return void
	 */

	public final  function add(User $user) {
		$password_hache = password_hash($user->password(), PASSWORD_DEFAULT);
		$request = $this->db->prepare('INSERT INTO utilisateur(pseudo, password, email, date_register, role) VALUES(:pseudo, :password, :email, NOW(), :role)');
		$request->bindValue(':pseudo', $user->pseudo());
		$request->bindValue(':password', $password_hache);
		$request->bindValue(':email', $user->email());
		$request->bindValue(':role', 'membre');
		$request->execute();
	}

	public final function verifyPseudo($pseudo) {
		$sql = 'SELECT id, pseudo, password, email, date_register FROM utilisateur WHERE pseudo = :pseudo';
		$request = $this->db->prepare($sql);
		$request->bindValue(':pseudo',$pseudo);
		$test = $request->execute();
		$request->setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, '\blog\model\User');
    $test = $request->fetchAll();
		if (empty($test)) {
			$resultat = false;
		} else {
			$resultat = true;
		}
		return $resultat;
	}

	public final function verifyEmail($email) {
		$sql = 'SELECT id, pseudo, password, email, date_register FROM utilisateur WHERE email = :email';
		$request = $this->db->prepare($sql);
		$request->bindValue(':email',$email);
		$test = $request->execute();
		$request->setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, '\blog\model\User');
    $test = $request->fetchAll();
		if (empty($test)) {
			$resultat = false;
		} else {
			$resultat = true;
		}
		return $resultat;
	}

	public final function verifyUser($pseudo,$email) {
		$sql = 'SELECT id, pseudo, password, email, date_register FROM utilisateur WHERE pseudo = :pseudo AND email = :email';
		$request = $this->db->prepare($sql);
		$request->bindValue(':pseudo',$pseudo);
		$request->bindValue(':email',$email);
		$test = $request->execute();
		$request->setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, '\blog\model\User');
		$test = $request->fetchAll();
		if (empty($test)) {
			$resultat = false;
		} else {
			$resultat = true;
		}
		return $resultat;
	}

	public final function changeMdp($email,$password='') {
		$request = $this->db->prepare('UPDATE utilisateur SET password = :password WHERE email = :email');
		if ($password == '') {
			$length = rand(8,10);
			$chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
			$password = '';
	    for($i=0; $i<$length; $i++) {
	        $password .= $chars[rand(0, strlen($chars)-1)];
	    }
		}
		$password_hache = password_hash($password, PASSWORD_DEFAULT);
		$request->bindValue(':password', $password_hache);
		$request->bindValue(':email', $email);
		$request->execute();
		return $password;
	}

	public final function emailMdp($email,$password) {
		if (!preg_match("#^[a-z0-9._-]+@(hotmail|live|msn).[a-z]{2,4}$#", $email)) // On filtre les serveurs qui rencontrent des bogues.
			{
				$passage_ligne = "\r\n";
			} else {
				$passage_ligne = "\n";
			}
//=====Déclaration des messages au format texte et au format HTML.
$message_txt = "Bonjour,
Cet email a été envoyé suite à une demande de récupération de mot de passe.
Voici votre nouveau mot de passe : ". $password;
$message_html = "<html><head></head><body><b>Bonjour</b>,<br> Cet email a été envoyé suite à une demande de récupération de mot de passe.
<br>Voici votre nouveau mot de passe : ". $password ."</body></html>";
//==========

//=====Création de la boundary
$boundary = "-----=".md5(rand());
//==========

//=====Définition du sujet.
$sujet = "Réinitialisation du mot de passe";
//=========

//=====Création du header de l'e-mail.
$header = "From: \"Support\" <support@salucin.ovh>".$passage_ligne;
$header.= "Reply-to: \"Test\" <".$email.">".$passage_ligne;
$header.= "MIME-Version: 1.0".$passage_ligne;
$header.= "Content-Type: multipart/alternative;".$passage_ligne." boundary=\"$boundary\"".$passage_ligne;
//==========

//=====Création du message.
$message = $passage_ligne."--".$boundary.$passage_ligne;
//=====Ajout du message au format texte.
$message.= "Content-Type: text/plain; charset=\"ISO-8859-1\"".$passage_ligne;
$message.= "Content-Transfer-Encoding: 8bit".$passage_ligne;
$message.= $passage_ligne.$message_txt.$passage_ligne;
//==========
$message.= $passage_ligne."--".$boundary.$passage_ligne;
//=====Ajout du message au format HTML
$message.= "Content-Type: text/html; charset=\"ISO-8859-1\"".$passage_ligne;
$message.= "Content-Transfer-Encoding: 8bit".$passage_ligne;
$message.= $passage_ligne.$message_html.$passage_ligne;
//==========
$message.= $passage_ligne."--".$boundary."--".$passage_ligne;
$message.= $passage_ligne."--".$boundary."--".$passage_ligne;
//==========

//=====Envoi de l'e-mail.
mail($email,$sujet,$message,$header);
//==========

	}

	/**
	 * @access public
	 * @param int $id
	 * @return void
	 */

	public final  function delete($id) {
			$this->db->exec('DELETE FROM utilisateur WHERE id = '.(int) $id);
			$this->db->exec('DELETE FROM commentaire WHERE idAuteur = '.(int) $id);
			$this->db->exec('DELETE FROM signalement WHERE idAuteur = '.(int) $id);
			$this->db->exec('DELETE FROM signalement WHERE idSignale = '.(int) $id);
	}




	/**
	 * @access public
	 * @param int $start
	 * @param int $end
	 * @return array
	 */

	public final  function getList($start = -1, $end = -1) {

		$sql = 'SELECT id, pseudo, password, email, date_register FROM utilisateur ORDER BY id DESC';
    // On vérifie l'intégrité des paramètres fournis.
    if ($start != -1 || $end != -1)
    {
      $sql .= ' LIMIT '.(int) $end.' OFFSET '.(int) $start;
    }

    $request = $this->db->query($sql);
    $request->setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, '\blog\model\User');

    $listeUtilisateur = $request->fetchAll();

    // On parcourt notre liste de news pour pouvoir placer des instances de DateTime en guise de dates d'ajout et de modification.
    foreach ($listeUtilisateur as $user)
    {
      $user->setDate_register(new DateTime($user->date_register()));
    }

    $request->closeCursor();

    return $listeUtilisateur;
	}


	/**
	 * @access public
	 * @param int $id
	 * @return User
	 */

	public final  function getUnique($id) {
	 $request = $this->db->prepare('SELECT id, pseudo, password, email, date_register, role FROM utilisateur WHERE id = :id');
 	 $request->bindValue(':id', (int) $id, PDO::PARAM_INT);
 	 $request->execute();
 	 $request->setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, '\blog\model\User');

 	 $user = $request->fetch();

 	 $user->setDate_register(new DateTime($user->date_register()));

 	 return $user;
	}


	public final function connexion($pseudo, $password) {
		//  Récupération de l'utilisateur et de son pass hashé
$req = $this->db->prepare('SELECT id, password, role FROM utilisateur WHERE pseudo = :pseudo');
$req->execute(array(
    ':pseudo' => $pseudo));
$resultat = $req->fetch();

// Comparaison du pass envoyé via le formulaire avec la base
$isPasswordCorrect = password_verify($password, $resultat['password']);

if ($resultat)
{
    if ($isPasswordCorrect) {
        session_start();
        $_SESSION['id']  = $resultat['id'];
        $_SESSION['pseudo'] = $pseudo;
				$_SESSION['role'] = $resultat['role'];
    }
}
	}
}

?>
